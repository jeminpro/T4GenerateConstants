<#@ template language="C#" hostspecific="True" debug="True" 
#><#@ output extension="cs" 
#><#@ assembly name="System.Data" 
#><#@ assembly name="System.Core" 
#><#@ import namespace="System.Collections.Generic" 
#><#@ import namespace="System.Data" 
#><#@ import namespace="System.Data.SqlClient" 
#><#@ import namespace="System.Linq"  
#><#
    var sqlConn = new SqlConnection(@"Data Source=DEV-SQL01\DEVSQL01;Initial Catalog=DB;Integrated Security=True");
    sqlConn.Open();
#>//-----------------------------------
// GenerateConstants
// <auto-generated />
//-----------------------------------

using System.ComponentModel;
using System.Diagnostics.CodeAnalysis;

namespace Sample.Business.Constants
{	
	<#= GenerateColumnConstantValueClass(sqlConn, "[DB].[dbo].[trMapConstraint]", "MapConstraintShortName", "MapConstraintID", "MapConstraint") #>
	<#= GenerateColumnConstantValueClass(sqlConn, "[DB].[dbo].[trSampleRequirement]", "SampleRequirementShortName", "SampleRequirementID", "SampleRequirement") #>
<#+	 

	public string GenerateColumnConstantClass(SqlConnection sqlConn, string tableName, string columnName, string idColumnName, string classPrefix = "", string valuePrefix = "")
	{
		var colList = columnName == idColumnName ? string.Format("[{0}]", columnName) : string.Format("[{0}], [{1}]", idColumnName, columnName);
		var sql = string.Format("SELECT {3} FROM {2} WHERE {1} IS NOT NULL ORDER BY {0}", idColumnName, columnName, tableName, colList);
		var sqlComm = new SqlCommand(sql, sqlConn);

        var reader = sqlComm.ExecuteReader();
		var className = String.Format("{0}{1}", columnName, "s");
	#>[SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Suppression is OK here.")]
	[SuppressMessage("StyleCop.CSharp.NamingRules", "SA1310:FieldNamesMustNotContainUnderscore", Justification = "Reviewed. Suppression is OK here.")]
	public class <#=classPrefix#><#=className#>
	{
		<#+
        var sb = new System.Text.StringBuilder();

	    var columnOutputs = new List<string>();

		while (reader.Read())
        {
            var tidyColumnName = TidyName(reader[columnName].ToString());
            tidyColumnName = char.ToUpper(tidyColumnName[0]) + tidyColumnName.Substring(1);
            var output = "public const string " + valuePrefix + tidyColumnName + @" = """ + reader[columnName] + @""";";

            if (!columnOutputs.Contains(output))
            {
                columnOutputs.Add(output);
            }
		}

	    foreach (var columnOutput in columnOutputs)
	    {
	        sb.Append("\t\t");
            sb.AppendLine(columnOutput);
			sb.AppendLine(String.Empty);
			sb.Append("\t\t");
	    }
			
        sb.Remove(sb.Length - 4, 4);
		sb.AppendLine("\t}");

        reader.Close();
        sqlComm.Dispose();
		return sb.ToString();
	}

	public string GenerateColumnConstantValueClass(SqlConnection sqlConn, string tableName, string columnName, string idColumnName, string classPrefix = "", string valuePrefix = "")
	{
		var colList = columnName == idColumnName ? string.Format("[{0}]", columnName) : string.Format("[{0}], [{1}]", idColumnName, columnName);
		var sql = string.Format("SELECT {3} FROM {2} WHERE {1} IS NOT NULL ORDER BY {0}", idColumnName, columnName, tableName, colList);
		
		var tableSplit = tableName.Split('.');
		var schema = tableSplit[1].Trim('[',']');
		var localTableName = tableSplit[2].Trim('[',']');

	    var typeSql = string.Format(@"SELECT c.DATA_TYPE AS TypeName FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '{0}' AND c.COLUMN_NAME = '{1}' AND c.TABLE_SCHEMA = '{2}'", localTableName, idColumnName, schema);
		var sqlCommType = new SqlCommand(typeSql, sqlConn);

		var sqlType = sqlCommType.ExecuteScalar().ToString();
		var propType = GetPropertyType(sqlType);
		var valueFormat = GetPropertyValueFormat(sqlType);

		var sqlComm = new SqlCommand(sql, sqlConn);

        var reader = sqlComm.ExecuteReader();
		var className = "Values";
	#>[SuppressMessage("StyleCop.CSharp.MaintainabilityRules", "SA1402:FileMayOnlyContainASingleClass", Justification = "Reviewed. Suppression is OK here.")]
	[SuppressMessage("StyleCop.CSharp.NamingRules", "SA1310:FieldNamesMustNotContainUnderscore", Justification = "Reviewed. Suppression is OK here.")]
	public class <#=classPrefix#><#=className#>
	{
		<#+
        var sb = new System.Text.StringBuilder();

        while (reader.Read())
        {
            var tidyColumnName = TidyName(reader[columnName].ToString());
            tidyColumnName = char.ToUpper(tidyColumnName[0]) + tidyColumnName.Substring(1);
			sb.Append("\t\t");
            sb.AppendLine(string.Format("public const {0} {1}{2} = {3};", propType, valuePrefix, tidyColumnName, string.Format(valueFormat, reader[idColumnName])));
			sb.AppendLine(String.Empty);
			sb.Append("\t\t");
		}		
        sb.Remove(sb.Length - 4, 4);
		sb.AppendLine("\t}");

        reader.Close();
        sqlComm.Dispose();
        sqlCommType.Dispose();
		return sb.ToString();
	}

    public string GenerateColumnConstantValueEnum(SqlConnection sqlConn, string tableName, string columnName, string idColumnName, string classPrefix = "", string valuePrefix = "")
	{
		var colList = columnName == idColumnName ? string.Format("[{0}]", columnName) : string.Format("[{0}], [{1}]", idColumnName, columnName);
		var sql = string.Format("SELECT {3} FROM {2} WHERE {1} IS NOT NULL ORDER BY {0}", idColumnName, columnName, tableName, colList);
		
		var tableSplit = tableName.Split('.');
		var schema = tableSplit[1].Trim('[',']');
		var localTableName = tableSplit[2].Trim('[',']');

	    var typeSql = string.Format(@"SELECT c.DATA_TYPE AS TypeName FROM INFORMATION_SCHEMA.COLUMNS c WHERE c.TABLE_NAME = '{0}' AND c.COLUMN_NAME = '{1}' AND c.TABLE_SCHEMA = '{2}'", localTableName, idColumnName, schema);
		var sqlCommType = new SqlCommand(typeSql, sqlConn);

		var sqlType = sqlCommType.ExecuteScalar().ToString();
		var propType = GetPropertyType(sqlType);
		var valueFormat = GetPropertyValueFormat(sqlType);

		var sqlComm = new SqlCommand(sql, sqlConn);

        var reader = sqlComm.ExecuteReader();
		var className = "Names";
	#>/// <summary>
    /// Table: <#=tableName#>
    /// </summary>
    public enum <#=classPrefix#><#=className#>
	{
<#+
        var sb = new System.Text.StringBuilder();

        var pairs = new List<string[]>();
        while (reader.Read())
        {
            var tidyColumnName = TidyName(reader[columnName].ToString());
            tidyColumnName = char.ToUpper(tidyColumnName[0]) + tidyColumnName.Substring(1);
            pairs.Add(new string[] { tidyColumnName, reader[idColumnName].ToString() });
		}	
	
        int longestNameLen = pairs.Select(p => p[0].Length).Max();
        foreach (var pair in pairs)
        {    
            sb.AppendFormat("\t\t/// <summary>\r\n");
            sb.AppendFormat("\t\t/// {0}: {1},\r\n", idColumnName, pair[1]);
            sb.AppendFormat("\t\t/// {0}: {1}\r\n", columnName, pair[0]);
            sb.AppendFormat("\t\t/// </summary>\r\n");
            sb.AppendFormat(string.Format("\t\t{0}{1} = {2},\r\n", valuePrefix, pair[0]/*.PadRight(longestNameLen)*/, string.Format(valueFormat, pair[1])));
        }
        sb.Remove(sb.Length - 3, 3); // remove last comma
        sb.AppendLine();
		sb.AppendLine("\t}");

        reader.Close();
        sqlComm.Dispose();
        sqlCommType.Dispose();
		return sb.ToString();
	}

    public string TidyName(string name)
    {
		if (string.IsNullOrEmpty(name))
		{
			return string.Empty;
		}

        var tidyName = name;

		tidyName = tidyName.Replace("&", "And").Replace("/", "And").Replace("'", "").Replace("-", "").Replace(" ", "").Replace("(", "").Replace(")", "");
		
        return tidyName;
    }

	private static string GetPropertyType(string sqlType)
    {
        string sysType = "string";
        switch(sqlType)
        {
            case "bigint":
                sysType = "long";
                break;
            case "smallint":
                sysType = "short";
                break;
            case "int":
                sysType = "int";
                break;
            case "uniqueidentifier":
                sysType = "Guid";
                break;
            case "smalldatetime":
            case "datetime":
            case "datetime2":
            case "date":
                sysType = "DateTime";
                break;
            case "datetimeoffset":
                sysType = "DateTimeOffset";
                break;
            case "time":
                sysType = "TimeSpan";
                break;
            case "float":
                sysType = "double";
                break;
            case "real":
                sysType = "float";
                break;
            case "numeric":
            case "smallmoney":
            case "decimal":
            case "money":
                sysType = "decimal";
                break;
            case "tinyint":
                sysType = "byte";
                break;
            case "bit":
                sysType = "bool";
                break;
            case "image":
            case "binary":
            case "varbinary":
            case "varbinary(max)":
            case "timestamp":
                sysType = "byte[]";
                break;
        }
        return sysType;
    }

	private static string GetPropertyValueFormat(string sqlType)
    {
		//NB: only tested for int and string so far...
        string format = "@\"{0}\"";
        switch(sqlType)
        {
            case "bigint":
            case "smallint":
            case "int":
                format = "{0}";
                break;
                format = "{0}";
                break;
            case "uniqueidentifier":
                format = "Guid";
                break;
            case "smalldatetime":
            case "datetime":
            case "datetime2":
            case "date":
                format = "new DateTime({0}, {1}, {2})"; //How do we split value?
                break;
            case "datetimeoffset":
                format = "{0}";
                break;
            case "time":
                format = "{0}";
                break;
            case "float":
                format = "{0}";
                break;
            case "real":
                format = "{0}";
                break;
            case "numeric":
            case "smallmoney":
            case "decimal":
            case "money":
                format = "{0}";
                break;
            case "tinyint":
                format = "{0}";
                break;
            case "bit":
                format = "{0}";
                break;
            case "image":
            case "binary":
            case "varbinary":
            case "varbinary(max)":
            case "timestamp":
                format = "new byte[] { {0} }"; // Doubt this works...
                break;
        }
        return format;
    }
#>